Kubernetes
----------



Pods are the smallest deployable units of computing that you can create and manage in Kubernetes.

A Pod is a group of one or more containers, with shared storage and network resources, and a specification for how to run the containers.

Pods Lifecycle:
	- Pending
	- Running
	- Succeeded
	- Failed
	- Unknown

Container states:
	- Waiting
	- Running
	- Terminated

--------
	
How Pods handle problems with containers

Kubernetes manages container failures within Pods using a restartPolicy defined in the Pod spec.

    Initial crash: Kubernetes attempts an immediate restart based on the Pod restartPolicy.
    Repeated crashes: After the initial crash Kubernetes applies an exponential backoff delay for subsequent restarts, described in restartPolicy. This prevents rapid, repeated restart attempts from overloading the system.
    CrashLoopBackOff state: This indicates that the backoff delay mechanism is currently in effect for a given container that is in a crash loop, failing and restarting repeatedly.
    Backoff reset: If a container runs successfully for a certain duration (e.g., 10 minutes), Kubernetes resets the backoff delay, treating any new crash as the first one.


--------

Init Containers, example:

apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels:
    app.kubernetes.io/name: MyApp
spec:
  containers:
  - name: myapp-container
    image: busybox:1.28
    command: ['sh', '-c', 'echo The app is running! && sleep 3600']
  initContainers:
  - name: init-myservice
    image: busybox:1.28
    command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
  - name: init-mydb
    image: busybox:1.28
    command: ['sh', '-c', "until nslookup mydb.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for mydb; sleep 2; done"]

You can start this Pod by running:
kubectl apply -f myapp.yaml

The output is similar to this:
pod/myapp-pod created

And check on its status with:
kubectl get -f myapp.yaml

or for more details:
kubectl describe -f myapp.yaml

